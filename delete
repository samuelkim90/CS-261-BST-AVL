def delete(self, val, Node):
    if Node is None:
        return Node
    elif val < Node.value:
        Node.left = self.delete(val, Node.left)
    elif val > Node.value:
        Node.right = self.delete(val, Node.right)
    else:
        if Node.left is None:
            lt = Node.right
            Node = None
            return lt
        elif Node.right is None:
            lt = Node.left
            Node = None
            return lt
        rgt = self.MinimumValueNode(Node.right)
        Node.value = rgt.value
        Node.right = self.delete(rgt.value, Node.right)
    if Node is None:
        return Node
    Node.height = 1 + max(self.height(Node.left), self.height(Node.right))
    balance = self.balance(Node)
    if balance > 1 and self.balance(Node.left) >= 0:
        return self.rotateR(Node)
    if balance < -1 and self.balance(Node.right) <= 0:
        return self.rotateL(Node)
    if balance > 1 and self.balance(Node.left) < 0:
        Node.left = self.rotateL(Node.left)
        return self.rotateR(Node)
    if balance < -1 and self.balance(Node.right) > 0:
        Node.right = self.rotateR(Node.right)
        return self.rotateL(Node)
    return Nodeâ€‹
